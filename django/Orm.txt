1.from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):
        return self.name

class Author(models.Model):
    name = models.CharField(max_length=200)
    email = models.EmailField()

    def __str__(self):
        return self.name

class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author)
    n_comments = models.IntegerField()
    n_pingbacks = models.IntegerField()
    rating = models.IntegerField()

    def __str__(self):
        return self.headline

 
Get or create
-----------------------

try:
    obj = Person.objects.get(first_name='John', last_name='Lennon')
except Person.DoesNotExist:
    obj = Person(first_name='John', last_name='Lennon', birthday=date(1940, 10, 9))
    obj.save()

OR

obj, created = Person.objects.get_or_create(
    first_name='John',
    last_name='Lennon',
    defaults={'birthday': date(1940, 10, 9)},
)
where object is the retrieved or created object and created is a boolean specifying whether a new object was created.



UPDATE OR CREATE
-----------------------------------

defaults = {'first_name': 'Bob'}
try:
    obj = Person.objects.get(first_name='John', last_name='Lennon')
    for key, value in defaults.items():
        setattr(obj, key, value)
    obj.save()
except Person.DoesNotExist:
    new_values = {'first_name': 'John', 'last_name': 'Lennon'}
    new_values.update(defaults)
    obj = Person(**new_values)
    obj.save()



or


obj, created = Person.objects.update_or_create(
    first_name='John', last_name='Lennon',
    defaults={'first_name': 'Bob'},
)



BULK CREATE
---------------------
from itertools import islice

batch_size = 100
objs = (Entry(headline='Test %s' % i) for i in range(1000))
while True:
    batch = list(islice(objs, batch_size))
    if not batch:
        break
    Entry.objects.bulk_create(batch, batch_size)


Most of the time you’ll use all(), get(), filter() and exclude() when you need to look up objects from the database
 

get all rows 
-----------------------------------------
 

>>> q = q.filter(pub_date__lte=datetime.date.today())
>>> q = q.exclude(body_text__icontains="food")
>>> print(q)  ----------------------------> DB QUERY HAPPENS HERE AS QUERYSETS ARE LAZY
REFER https://docs.djangoproject.com/en/2.2/ref/models/querysets/#when-querysets-are-evaluated

 


fetch first()
--------------------------------
p = Article.objects.order_by('title', 'pub_date').first()


Order by
--------------------
Entry.objects.filter(pub_date__year=2005).order_by('-pub_date') -> decending order of pub_date', 
Entry.objects.filter(pub_date__year=2005).order_by( 'headline') -> ascenindg  order of headline
 
Limlit 5
------------------------------------------------------
Entry.objects.all()[:5]
Person.objects.all()[:5]

(OFFSET 5 LIMIT 5) sixth through tenth objects 
---------------------------------------------------
Entry.objects.all()[5:10]
Person.objects.all()[5:10]

Distinct
--------------------------------------------------
>>> Author.objects.distinct()
[...]

>>> Entry.objects.order_by('pub_date').distinct('pub_date')
[...]

>>> Entry.objects.order_by('blog').distinct('blog')
[...]

>>> Entry.objects.order_by('author', 'pub_date').distinct('author', 'pub_date')
[...]

>>> Entry.objects.order_by('blog__name', 'mod_date').distinct('blog__name', 'mod_date')
[...]

>>> Entry.objects.order_by('author', 'pub_date').distinct('author')
[...]


Collections 
-----------------------
# This list contains a Blog object.
>>> Blog.objects.filter(name__startswith='Beatles')
<QuerySet [<Blog: Beatles Blog>]>

# This list contains a dictionary.
>>> Blog.objects.filter(name__startswith='Beatles').values()
<QuerySet [{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]>

 

 
below gets are same for exact match
-----------------------------------
Blog.objects.get(id__exact=14)  # Explicit form
Blog.objects.get(id=14)         # __exact is implied
Entry.objects.get(firstName__exact="KUMAR")
 
 
,
Entry.objects.get(headline__startswith='Lennon')
Entry.objects.get(headline__endswith='Lennon')
Entry.objects.get(headline__istartswith='Lennon')
Entry.objects.get(headline__iendswith='Lennon')

FILTER
---------------------------------------------------------------------------------------------------
filter() will always give you a QuerySet, 

get from 2006 date
------------------------------------------
Entry.objects.filter(pub_date__year=2006)

get starts with
--------------------------------
Entry.objects.filter(headline__startswith='What')
q1 = Entry.objects.filter(headline__startswith="What")

IN
---------------

# Get blogs entries with id 1, 4 and 7
>>> Blog.objects.filter(pk__in=[1,4,7])
Person.objects.filter(id__in=[1,4,7])



Entry.objects.filter(id__in=[1, 3, 4])   ----> SELECT ... WHERE id IN (1, 3, 4);
Entry.objects.filter(headline__in='abc')  ----> SELECT ... WHERE headline IN ('a', 'b', 'c');


 
 
YEAR
-----------------------------
Entry.objects.filter(pub_date__year=2005)
Entry.objects.filter(pub_date__year__gte=2005)

SELECT ... WHERE pub_date BETWEEN '2005-01-01' AND '2005-12-31';
SELECT ... WHERE pub_date >= '2005-01-01';


month
-------------------------------------
Entry.objects.filter(pub_date__month=12)
Entry.objects.filter(pub_date__month__gte=6)


SELECT ... WHERE EXTRACT('month' FROM pub_date) = '12';
SELECT ... WHERE EXTRACT('month' FROM pub_date) >= '6';



ISNULL
----------------------------

--- SELECT ... WHERE id IS NULL;
Entry.objects.get(id__exact=None)


Entry.objects.filter(pub_date__isnull=True)  ---------> SELECT ... WHERE pub_date IS NULL;

CACHE
----------------------------------------------------------------
>>> queryset = Entry.objects.all()
>>> print(queryset[5]) # Queries the database
>>> print(queryset[5]) # Queries the database again



>>> queryset = Entry.objects.all()
>>> [entry for entry in queryset] # Queries the database
>>> print(queryset[5]) # Uses cache
>>> print(queryset[5]) # Uses cache




Delete
----------
 Entry.objects.filter(pub_date__year=2005).delete() --> delete whose year is 2005
(5, {'webapp.Entry': 5})


Person.objects.all().delete()  ---> delete all

misss
------------
Entry.objects.extra(where=["foo='a' OR bar = 'a'", "baz = 'a'"])

SELECT * FROM blog_entry WHERE (foo='a' OR bar='a') AND (baz='a')



#Update
Employee.objects.filter(pub_date__year=2010).update(comments_on=False, headline='This is old')

>>> Entry.objects.filter(id=64).update(comments_on=True)
1

>>> Entry.objects.filter(slug='nonexistent-slug').update(comments_on=True)
0

>>> Entry.objects.filter(pub_date__year=2010).update(comments_on=False)
