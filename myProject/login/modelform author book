Example:
----------------------------------------------------------------------------
ex:
web page for taking input for
->name, title and date of birth

Form class
-----------------
- form class [ associated with web page ]
- form class extends forms.Form

backend steps:
----------------
1.create the model class [ is associated with the table ]
model class extends models.Model

class Author(models.Model):
    name = models.CharField(max_length=100)
    title = models.CharField(max_length=3)
    dob = models.DateField(blank=True, null=True)

2.With Form [ old style] not associated with model class
class AuthorForm(forms.Form):
    name = forms.CharField(max_length=100)
    title = forms.CharField()
    dob = forms.DateField(required=False)


changes in the views.py:
-------------------------
1. save to database:
f = AuthorForm(request.POST)
savedObj = f.save()


TITLE_CHOICES = [
    ('MR', 'Mr.'),
    ('MRS', 'Mrs.'),
    ('MS', 'Ms.'),
]

class Author(models.Model):
    name = models.CharField(max_length=100)
    #title = models.CharField(max_length=3, choices=TITLE_CHOICES)
    title = models.CharField(max_length=3)
    birth_date = models.DateField(blank=True, null=True)

    def __str__(self):
        return self.name


class AuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ['name', 'title', 'dob']
        #fields = '__all__'
        #exclude = ['title']

class Book(models.Model):
    name = models.CharField(max_length=100)
    authors = models.ManyToManyField(Author)

class BookForm(ModelForm):
    class Meta:
        model = Book
        fields = ['name', 'authors']


"""
title = forms.CharField(
        max_length=3,
        widget=forms.Select(choices=TITLE_CHOICES),
    )
the above code is equal to
class AuthorForm(forms.Form):
    name = forms.CharField(max_length=100)
    title = forms.CharField()
    dob = forms.DateField(required=False)

class BookForm(forms.Form):
    name = forms.CharField(max_length=100)
    authors = forms.ModelMultipleChoiceField(queryset=Author.objects.all())


"""









from myapp.models import Article
from myapp.forms import ArticleForm

# Create a form instance from POST data.
f = ArticleForm(request.POST)
# Save a new Article object from the form's data.
new_article = f.save()



# Create a form to edit an existing Article, but use
# POST data to populate the form.
a = Article.objects.get(pk=1)
f = ArticleForm(request.POST, instance=a)
f.save()


a = Author()
f = AuthorForm(request.POST, instance=a)
# Create and save the new author instance. There's no need to do anything else.
new_author = f.save()

